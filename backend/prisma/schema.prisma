// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String    @unique
  password String
  name     String
  isBanned Boolean @default(false)
  phone    String
  role     Role      @default(USER)
  courses  Course[]  @relation("UserToCourse")
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  cover       String?
  support     String?
  shortName   String
  price       Float
  isComplete  Int
  status      String
  discount    Float
  categoryID  String    @db.ObjectId
  creatorID   String?   @db.ObjectId
  category    Category  @relation(fields: [categoryID], references: [id])
  creator     User?     @relation(fields: [creatorID], references: [id], name: "UserToCourse")
  comments    Comment[]
  sessions    Session[] @relation("courseToSession")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  name    String
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  body          String
  courseID      String  @db.ObjectId
  creatorID     String  @db.ObjectId
  answer        Int
  score         Int
  isAnswer      Int
  mainCommentID String? @db.ObjectId

  course  Course @relation(fields: [courseID], references: [id])
  creator User   @relation(fields: [creatorID], references: [id])

  replies       Comment[] @relation("CommentReplies")
  parentComment Comment?  @relation("CommentReplies", fields: [mainCommentID], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  time      String
  video     String?
  free      Int
  course    Course?  @relation(fields: [courseId], references: [id] , name : "courseToSession")
  courseId  String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}